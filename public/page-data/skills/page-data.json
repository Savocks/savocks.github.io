{
    "componentChunkName": "component---src-pages-skills-jsx",
    "path": "/skills/",
    "result": {"data":{"allMdx":{"nodes":[{"frontmatter":{"caption":"I specialize in frontend through the use of technologies such as JavaScript and associated frameworks (Angular, React, Vue), but I have also worked with backend technologies","link":"/skills","pageTitle":"Skills","subTitle":"","title":"Skills","id":4},"body":"const _excluded = [\"components\"];\n\nfunction _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }\n\nfunction _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }\n\nfunction _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }\n\n/* @jsxRuntime classic */\n\n/* @jsx mdx */\nconst _frontmatter = {\n  \"id\": 4,\n  \"pageTitle\": \"Skills\",\n  \"title\": \"Skills\",\n  \"subTitle\": \"\",\n  \"caption\": \"I specialize in frontend through the use of technologies such as JavaScript and associated frameworks (Angular, React, Vue), but I have also worked with backend technologies\",\n  \"link\": \"/skills\"\n};\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = \"wrapper\";\nreturn function MDXContent(_ref) {\n  let {\n    components\n  } = _ref,\n      props = _objectWithoutProperties(_ref, _excluded);\n\n  return mdx(MDXLayout, _extends({}, layoutProps, props, {\n    components: components,\n    mdxType: \"MDXLayout\"\n  }), mdx(\"p\", null, `In my whole career I have developed numerous Web Apps for companies\nand many projects for didactic purposes everything to improve my IT skills in all the aspect of the Web.`), mdx(\"p\", null, `I have worked with backend and frontend technologies specializing in the\nfrontend with Vanilla JS and related frameworks`));\n}\n;\nMDXContent.isMDXComponent = true;"}]}},"pageContext":{}},
    "staticQueryHashes": ["1285448735"]}